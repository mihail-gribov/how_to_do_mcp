{
  "tools": {
    "how_to_do_list": {
      "description": "Показывает список всех доступных команд HOW TO DO с их описаниями",
      "inputSchema": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Поисковый запрос для фильтрации команд (опционально)"
          }
        },
        "additionalProperties": false
      },
      "prompt": "Покажи список всех команд HOW TO DO.\n\nПолный список команд:\n{commands_list}\n\n**Общее количество команд:** {total_commands}\n\n**Инструкции:**\n1. Выведи все команды в формате: название команды - краткое описание\n2. Каждую команду на отдельной строке\n3. В конце укажи общее количество команд\n\n**Формат вывода:**\n- Команда: краткое описание\n- Команда: краткое описание\n...\n\nВсего команд: {total_commands}"
    },
    "info_command": {
      "description": "Возвращает подробную информацию о конкретной команде HOW TO DO",
      "inputSchema": {
        "type": "object",
        "properties": {
          "command_name": {
            "type": "string",
            "description": "Название команды для получения подробной информации"
          }
        },
        "required": ["command_name"]
      },
      "prompt": "Предоставь подробную информацию о команде {command_name}.\n\nПолный список команд:\n{commands_list}\n\n**Инструкции:**\n1. Найди команду {command_name} в списке\n2. Если команда найдена, выведи подробную информацию:\n   - Название команды\n   - Полное описание\n   - Параметры (если есть)\n   - Примеры использования (если есть)\n3. Если команда не найдена, сообщи об этом и предложи похожие команды\n\n**Формат вывода:**\n## {command_name}\n**Описание:** [полное описание]\n**Параметры:** [список параметров]\n**Примеры:** [примеры использования]"
    },
    "check_test": {
      "description": "Проверяет конкретный тест: запускает его, анализирует результат и предоставляет отчёт",
      "inputSchema": {
        "type": "object",
        "properties": {
          "test_name": {
            "type": "string",
            "description": "Имя конкретного теста для проверки (например: test_complex_type_annotations)"
          }
        },
        "required": ["test_name"]
      },
      "prompt": "Проверь тест {test_name}.\n\nЕсли тест не запускается или не найден, попробуй поискать тесты с именами test_{test_name} или {test_name}_test. Если это не помогло, топроанализируй ситуацию и объясни, почему это происходит. \n\n* Если тест падает, определи причину:\n  * Неправильно написан код\n  * Неправильно написан тест\n\n* Действия:\n  * Если проблема в коде — проанализируй его, предложи исправление, оцени риски и сформируй отчёт\n  * Если проблема в тесте — исправь его и сформируй отчёт"
    },
    "check_all_tests": {
      "description": "Проверяет все тесты проекта: запускает полный набор тестов и анализирует результаты",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "additionalProperties": false
      },
      "prompt": "Проверь все тесты проекта.\n\n Если тесты не запустились, то проанализируй, почему это произошло и сообщи пользователю. \n\n* Сформируй саммари по результатам выполнения тестов\n\n* Сформируй отчет по упавшим тестам, проядя по каждому\n  * Проанализируй тест и код, который он тестирует\n  * Опиаши является ли причиной падения неправильный тест или код, который он проверяет\n  * Предложи решения для исправления теста (ебез изменения теста и кода)\n* Сформируй план исправления тестов\n* Сохрани весь отчет с планом в файле"
    },
    "analyze_function": {
      "description": "Проводит диагностику производительности функции: анализирует временную сложность, потребление памяти и предлагает оптимизации",
      "inputSchema": {
        "type": "object",
        "properties": {
          "func_name": {
            "type": "string",
            "description": "Имя функции для анализа производительности"
          }
        },
        "required": ["func_name"]
      },
      "prompt": "Проведи диагностику производительности функции **{func_name}**:\n\n**Не изменяй код** — только анализ и рекомендации.\n\n**Если функция подозрительно медленная (например heavy loops, костыльные алгоритмы):**\n1. Проведи анализ:\n   - Временная сложность (O‑n, O‑n log n…) \n   - Потребление памяти (успешный вариант vs плохой)\n   - Циклы, копирование, comprehensions, recusions\n2. Предложи профилирование (если это окажется полезным):\n   - `cProfile`, `memory-profiler`, `psutil`, `timeit`\n   - Если профилирование не нужно — пропусти\n3. Выяви узкие места, укажи возможные улучшения с обоснованиями, оценками риска и выгод\n\n**Если функция реализована хорошо (не вижу узких мест):**\n- Дай статус `\"OK\"` и краткое «функция выглядит хорошо, без явных проблем»\n\n**Иногда можно предложить быстрый фикс:**  \nЕсли очевидна точечная оптимизация, добавь её как **строку патча** (с заменой лишь в рамках этой функции). \n- Спроси пользователя: *«Разрешить вставку этого изменения?»*  \nЕсли пользователь соглашается — вставляй патч.\nБез согласия — просто предложи патч в отчёте"
    },
    "type_analyze": {
      "description": "Анализирует типизацию Python кода: добавляет аннотации типов, выявляет проблемы и даёт рекомендации",
      "inputSchema": {
        "type": "object",
        "properties": {
          "code_block": {
            "type": "string",
            "description": "Python код для анализа типизации"
          }
        },
        "required": ["code_block"]
      },
      "prompt": "Проанализируй Python‑код в {code_block}:\n\n1. Добавь типовые аннотации:\n   • параметров функций/методов\n   • возвращаемых значений\n2. Найди точки без типизации: переменные, параметры, результаты\n3. Для словарей с фиксированными ключами — предложи TypedDict\n4. Для абстракции интерфейсов/структур — предложи Protocol (PEP 544)\n5. Если значение принимает несколько типов — предложи Union\n6. Для контейнеров: использование Generic (`List[str]`, `Dict[int, Any]`)\n\nФормат вывода:\n1. Код с добавленными аннотациями (минимальный, без логики)  \n2. Список проблем: отсутствующие аннотации  \n3. Рекомендации: настройка mypy/pyright для строгой проверки и Ignore‑flags\n\nЛогика в коде не изменяется — только типизация и советы."
    },
    "generate_readme": {
      "description": "Генерирует и обновляет README.md по лучшим практикам Open Source с полной документацией проекта",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "additionalProperties": false
      },
      "prompt": "Ты — технический писатель и Python-разработчик, формирующий README.md по лучшим практикам Open Source.\n## README.md\n**Назначение:** Полная документация проекта\n- **Аудитория:** Все пользователи (от новичков до экспертов)\n- **Объём:** Подробный, исчерпывающий\n- **Содержание:**\n  - Полное описание проекта\n  - Детальная документация API\n  - Архитектура и дизайн\n  - История изменений (CHANGELOG)\n  - Лицензия и правовая информация\n  - Ссылки на дополнительную документацию\n  - Примеры всех возможностей\n  - Troubleshooting и FAQ\n  - **ОБЯЗАТЕЛЬНО: Содержание (Table of Contents) с навигацией по разделам**\n\n## quickstart.md\n**Назначение:** Быстрый старт для новых пользователей\n- **Аудитория:** Новички и те, кто хочет быстро попробовать\n- **Объём:** Краткий, сфокусированный\n- **Содержание:**\n  - Минимальные требования\n  - Быстрая установка\n  - Один рабочий пример\n  - Основные команды\n  - Следующие шаги\n\n## Аналогия\n- **README** = Полная инструкция по эксплуатации автомобиля\n- **quickstart** = Краткая инструкция \"как завести и поехать\"\n\n## Практический пример\n\n**README.md:**\n```markdown\n# My Awesome Project\n\nПолная документация проекта с описанием всех возможностей, API, архитектуры, примеров использования, troubleshooting и т.д.\n\n## 📋 Содержание\n\n- [📖 Описание](#-описание)\n- [🚀 Быстрый старт](#-быстрый-старт)\n- [📚 API Документация](#-api-документация)\n- [🏗️ Архитектура](#️-архитектура)\n- [🔧 Разработка](#-разработка)\n- [🧪 Тестирование](#-тестирование)\n- [📝 Примеры использования](#-примеры-использования)\n- [🤝 Contributing](#-contributing)\n- [📄 Лицензия](#-лицензия)\n- [📞 Поддержка](#-поддержка)\n\n## 📖 Описание\n\nПолное описание проекта...\n\n## 🚀 Быстрый старт\n\n### Установка\n```bash\npip install my-awesome-project\n```\n\n### Использование\n```python\nfrom my_project import main\nresult = main(\"hello\")\nprint(result)\n```\n\n## 📚 API Документация\n\nПолная документация API...\n\n## 🏗️ Архитектура\n\nОписание внутренней структуры...\n\n## 🤝 Contributing\n\nКак участвовать в разработке...\n```\n\n**quickstart.md:**\n```markdown\n# Быстрый старт\n\n## Установка\n```bash\npip install my-awesome-project\n```\n\n## Использование\n```python\nfrom my_project import main\nresult = main(\"hello\")\nprint(result)\n```\n\n## Следующие шаги\n- [Полная документация](README.md)\n- [Примеры](examples/)\n```\n\n**ОБЯЗАТЕЛЬНЫЕ ТРЕБОВАНИЯ:**\n1. **ВСЕГДА включай раздел \"📋 Содержание\"** с навигацией по всем разделам\n2. **Используй эмодзи-иконки** для визуального разделения разделов\n3. **Создавай якорные ссылки** для быстрой навигации\n4. **Структурируй содержание** с подразделами для сложных документов\n5. **ВАЖНО: Если файл README.md уже существует, НЕ изменяй набор разделов** — все уже созданные разделы должны остаться, новые добавлять не надо\n\nГенерируй только файл (`README.md` в Markdown), **без лишнего поясняющего текста агенту**.  \nЕсли данных недостаточно, то такие разделы пропусти, но сообщи пользователю о тех разделах, по которым у тебя информации, поэтому они пропущены."
    },
    "generate_gitignore": {
      "description": "Создает и обновляет файл .gitignore на основе анализа структуры проекта и правил из for_gitignore.toml",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "additionalProperties": false
      },
      "prompt": "Создай файл .gitignore ТОЛЬКО с предоставленными правилами\n\n**ПРАВИЛА ДЛЯ ИСПОЛЬЗОВАНИЯ (СТРОГО ТОЛЬКО ЭТИ):**\n{rules_by_category}\n\n**Статистика:**\n- Всего правил: {total_rules}\n- Категорий: {categories_count}\n\n**КРИТИЧЕСКИ ВАЖНО:**\n1. Используй ТОЛЬКО правила из списка выше\n2. НЕ добавляй никаких дополнительных правил\n3. НЕ добавляй общие правила типа *.log, *.tmp, *.bak и т.д.\n4. НЕ добавляй правила для ОС, IDE или других категорий\n5. Создай файл .gitignore в корне проекта\n6. Сгруппируй правила по категориям с комментариями\n7. Добавь пустые строки между категориями\n\n**Формат вывода:**\n```\n# Категория\nправило1\nправило2\n\n# Другая категория\nправило3\n```\n\n**Результат:** Созданный файл .gitignore ТОЛЬКО с предоставленными правилами. Отчет: какие категории созданы и сколько правил в каждой."
    }
  }
}