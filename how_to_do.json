{
  "tools": {
    "how_to_do_list": {
      "description": "Shows a list of all available HOW TO DO commands with their descriptions",
      "inputSchema": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Search query for filtering commands (optional)"
          }
        },
        "additionalProperties": false
      },
      "prompt": "Show a list of all HOW TO DO commands.\n\nComplete list of commands:\n{commands_list}\n\n**Total number of commands:** {total_commands}\n\n**Instructions:**\n1. Display all commands in format: command name - brief description\n2. Each command on a separate line\n3. At the end indicate the total number of commands\n\n**Output format:**\n- Command: brief description\n- Command: brief description\n...\n\nTotal commands: {total_commands}"
    },
    "info_command": {
      "description": "Returns detailed information about a specific HOW TO DO command",
      "inputSchema": {
        "type": "object",
        "properties": {
          "command_name": {
            "type": "string",
            "description": "Command name to get detailed information about"
          }
        },
        "required": ["command_name"]
      },
      "prompt": "Provide detailed information about the command {command_name}.\n\nComplete list of commands:\n{commands_list}\n\n**Instructions:**\n1. Find the command {command_name} in the list\n2. If the command is found, display detailed information:\n   - Command name\n   - Full description\n   - Parameters (if any)\n   - Usage examples (if any)\n3. If the command is not found, report this and suggest similar commands\n\n**Output format:**\n## {command_name}\n**Description:** [full description]\n**Parameters:** [list of parameters]\n**Examples:** [usage examples]"
    },
    "check_test": {
      "description": "Checks a specific test: runs it, analyzes the result and provides a report",
      "inputSchema": {
        "type": "object",
        "properties": {
          "test_name": {
            "type": "string",
            "description": "Name of the specific test to check (e.g.: test_complex_type_annotations)"
          }
        },
        "required": ["test_name"]
      },
      "prompt": "Check the test {test_name}.\n\nIf the test doesn't run or is not found, try looking for tests with names test_{test_name} or {test_name}_test. If this doesn't help, analyze the situation and explain why this is happening.\n\n* If the test fails, determine the cause:\n  * Incorrectly written code\n  * Incorrectly written test\n\n* Actions:\n  * If the problem is in the code ‚Äî analyze it, suggest a fix, assess risks and form a report\n  * If the problem is in the test ‚Äî fix it and form a report"
    },
    "check_all_tests": {
      "description": "Checks all project tests: runs the full test suite and analyzes results",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "additionalProperties": false
      },
      "prompt": "Check all project tests.\n\nIf the tests didn't start, then analyze why this happened and inform the user.\n\n* Form a summary of test execution results\n\n* Form a report on failed tests, going through each one\n  * Analyze the test and the code it tests\n  * Describe whether the cause of failure is an incorrect test or the code it checks\n  * Suggest solutions for fixing the test (without changing the test and code)\n* Form a plan for fixing tests\n* Save the entire report with plan in a file"
    },
    "analyze_function": {
      "description": "Conducts performance diagnostics of a function: analyzes time complexity, memory consumption and suggests optimizations",
      "inputSchema": {
        "type": "object",
        "properties": {
          "func_name": {
            "type": "string",
            "description": "Function name for performance analysis"
          }
        },
        "required": ["func_name"]
      },
      "prompt": "Conduct performance diagnostics of function **{func_name}**:\n\n**Do not change the code** ‚Äî only analysis and recommendations.\n\n**If the function is suspiciously slow (e.g. heavy loops, hacky algorithms):**\n1. Conduct analysis:\n   - Time complexity (O‚Äën, O‚Äën log n‚Ä¶) \n   - Memory consumption (successful case vs bad case)\n   - Loops, copying, comprehensions, recursions\n2. Suggest profiling (if this turns out to be useful):\n   - `cProfile`, `memory-profiler`, `psutil`, `timeit`\n   - If profiling is not needed ‚Äî skip\n3. Identify bottlenecks, indicate possible improvements with justifications, risk and benefit assessments\n\n**If the function is well implemented (no obvious bottlenecks):**\n- Give status `\"OK\"` and brief \"function looks good, no obvious issues\"\n\n**Sometimes you can suggest a quick fix:**  \nIf an obvious targeted optimization is evident, add it as a **patch line** (with replacement only within this function). \n- Ask the user: *\"Allow insertion of this change?\"*  \nIf the user agrees ‚Äî insert the patch.\nWithout consent ‚Äî just suggest the patch in the report"
    },
    "type_analyze": {
      "description": "Analyzes Python code typing: adds type annotations, identifies issues and gives recommendations",
      "inputSchema": {
        "type": "object",
        "properties": {
          "code_block": {
            "type": "string",
            "description": "Python code for typing analysis"
          }
        },
        "required": ["code_block"]
      },
      "prompt": "Analyze Python code in {code_block}:\n\n1. Add type annotations:\n   ‚Ä¢ function/method parameters\n   ‚Ä¢ return values\n2. Find untyped points: variables, parameters, results\n3. For dictionaries with fixed keys ‚Äî suggest TypedDict\n4. For interface/structure abstraction ‚Äî suggest Protocol (PEP 544)\n5. If a value accepts multiple types ‚Äî suggest Union\n6. For containers: use Generic (`List[str]`, `Dict[int, Any]`)\n\nOutput format:\n1. Code with added annotations (minimal, without logic)  \n2. List of issues: missing annotations  \n3. Recommendations: configure mypy/pyright for strict checking and Ignore‚Äëflags\n\nLogic in code doesn't change ‚Äî only typing and advice."
    },
    "generate_readme": {
      "description": "Generates and updates README.md according to Open Source best practices with complete project documentation",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "additionalProperties": false
      },
      "prompt": "You are a technical writer and Python developer, forming README.md according to Open Source best practices.\n## README.md\n**Purpose:** Complete project documentation\n- **Audience:** All users (from beginners to experts)\n- **Volume:** Detailed, comprehensive\n- **Content:**\n  - Complete project description\n  - Detailed API documentation\n  - Architecture and design\n  - Change history (CHANGELOG)\n  - License and legal information\n  - Links to additional documentation\n  - Examples of all capabilities\n  - Troubleshooting and FAQ\n  - **MANDATORY: Table of Contents with navigation by sections**\n\n## quickstart.md\n**Purpose:** Quick start for new users\n- **Audience:** Beginners and those who want to try quickly\n- **Volume:** Brief, focused\n- **Content:**\n  - Minimum requirements\n  - Quick installation\n  - One working example\n  - Basic commands\n  - Next steps\n\n## Analogy\n- **README** = Complete car operation manual\n- **quickstart** = Brief instruction \"how to start and drive\"\n\n## Practical example\n\n**README.md:**\n```markdown\n# My Awesome Project\n\nComplete project documentation with description of all capabilities, API, architecture, usage examples, troubleshooting, etc.\n\n## üìã Table of Contents\n\n- [üìñ Description](#-description)\n- [üöÄ Quick Start](#-quick-start)\n- [üìö API Documentation](#-api-documentation)\n- [üèóÔ∏è Architecture](#Ô∏è-architecture)\n- [üîß Development](#-development)\n- [üß™ Testing](#-testing)\n- [üìù Usage Examples](#-usage-examples)\n- [ü§ù Contributing](#-contributing)\n- [üìÑ License](#-license)\n- [üìû Support](#-support)\n\n## üìñ Description\n\nComplete project description...\n\n## üöÄ Quick Start\n\n### Installation\n```bash\npip install my-awesome-project\n```\n\n### Usage\n```python\nfrom my_project import main\nresult = main(\"hello\")\nprint(result)\n```\n\n## üìö API Documentation\n\nComplete API documentation...\n\n## üèóÔ∏è Architecture\n\nDescription of internal structure...\n\n## ü§ù Contributing\n\nHow to participate in development...\n```\n\n**quickstart.md:**\n```markdown\n# Quick Start\n\n## Installation\n```bash\npip install my-awesome-project\n```\n\n## Usage\n```python\nfrom my_project import main\nresult = main(\"hello\")\nprint(result)\n```\n\n## Next Steps\n- [Complete Documentation](README.md)\n- [Examples](examples/)\n```\n\n**MANDATORY REQUIREMENTS:**\n1. **ALWAYS include \"üìã Table of Contents\" section** with navigation to all sections\n2. **Use emoji icons** for visual separation of sections\n3. **Create anchor links** for quick navigation\n4. **Structure content** with subsections for complex documents\n5. **IMPORTANT: If README.md file already exists, DO NOT change the set of sections** ‚Äî all already created sections should remain, no need to add new ones\n\nGenerate only the file (`README.md` in Markdown), **without extra explanatory text to the agent**.  \nIf data is insufficient, then skip such sections, but inform the user about those sections for which you have no information, so they are skipped."
    },
    "generate_gitignore": {
      "description": "Creates and updates .gitignore file based on project structure analysis and rules from how_to_do_gitignore.toml",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "additionalProperties": false
      },
      "prompt": "Create .gitignore file ONLY with provided rules\n\n**RULES FOR USE (STRICTLY ONLY THESE):**\n{rules_by_category}\n\n**Statistics:**\n- Total rules: {total_rules}\n- Categories: {categories_count}\n\n**CRITICALLY IMPORTANT:**\n1. Use ONLY rules from the list above\n2. DO NOT add any additional rules\n3. DO NOT add general rules like *.log, *.tmp, *.bak, etc.\n4. DO NOT add rules for OS, IDE or other categories\n5. Create .gitignore file in project root\n6. Group rules by categories with comments\n7. Add empty lines between categories\n\n**Output format:**\n```\n# Category\nrule1\nrule2\n\n# Another category\nrule3\n```\n\n**Result:** Created .gitignore file ONLY with provided rules. Report: which categories were created and how many rules in each."
    }
  }
}