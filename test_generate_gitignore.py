#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥—ã generate gitignore
"""

import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
sys.path.insert(0, os.path.expanduser('~/.cursor/tools'))

def test_generate_gitignore():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã generate gitignore"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    request = {
        "jsonrpc": "2.0",
        "id": 1,
        "method": "tools/call",
        "params": {
            "name": "generate_gitignore",
            "arguments": {}
        }
    }
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        from how_to_do import handle_request
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        response = handle_request(request)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if "result" in response:
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ generate gitignore —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print(f"–°—Ç–∞—Ç—É—Å: {response.get('result', {}).get('content', [{}])[0].get('text', '')[:200]}...")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ generate gitignore")
            print(f"–û—à–∏–±–∫–∞: {response.get('error', {})}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        return False

def test_load_gitignore_rules():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª gitignore"""
    
    try:
        from how_to_do import load_gitignore_rules
        
        rules = load_gitignore_rules()
        print(f"‚úÖ –ü—Ä–∞–≤–∏–ª–∞ gitignore –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(rules)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        for category, patterns in rules.items():
            print(f"  - {category}: {len(patterns)} –ø—Ä–∞–≤–∏–ª")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª gitignore: {e}")
        return False

def test_analyze_project():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    try:
        from how_to_do import analyze_project_for_gitignore, get_project_path
        
        project_path = get_project_path()
        print(f"üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç: {project_path}")
        
        rules_by_category = analyze_project_for_gitignore(project_path)
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(rules_by_category)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        for category, rules in rules_by_category.items():
            print(f"  - {category}: {len(rules)} –ø—Ä–∞–≤–∏–ª")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        return False

if __name__ == '__main__':
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã generate gitignore...")
    print()
    
    # –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª
    print("1. –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª gitignore:")
    test1 = test_load_gitignore_rules()
    print()
    
    # –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
    print("2. –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
    test2 = test_analyze_project()
    print()
    
    # –¢–µ—Å—Ç 3: –ö–æ–º–∞–Ω–¥–∞ generate gitignore
    print("3. –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã generate gitignore:")
    test3 = test_generate_gitignore()
    print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if test1 and test2 and test3:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏") 