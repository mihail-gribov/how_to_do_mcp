#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Cursor IDE
"""

import json
import sys
import os

def test_mcp_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP"""
    
    mcp_config_path = os.path.expanduser('~/.cursor/mcp.json')
    
    if not os.path.exists(mcp_config_path):
        print("‚ùå MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    try:
        with open(mcp_config_path, 'r') as f:
            config = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ HOW TO DO —Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        servers = config.get('mcpServers', {})
        how_to_do_server = None
        
        for server_name, server_config in servers.items():
            if 'how_to_do' in server_name.lower():
                how_to_do_server = server_config
                break
        
        if how_to_do_server:
            print("‚úÖ HOW TO DO —Å–µ—Ä–≤–µ—Ä –Ω–∞–π–¥–µ–Ω –≤ MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            print(f"   –ò–º—è: {list(servers.keys())[list(servers.values()).index(how_to_do_server)]}")
            print(f"   –ö–æ–º–∞–Ω–¥–∞: {how_to_do_server.get('command', 'N/A')}")
            return True
        else:
            print("‚ùå HOW TO DO —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è MCP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_server_files():
    """–¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞"""
    
    server_dir = os.path.expanduser('~/.cursor/tools')
    required_files = ['how_to_do.py', 'how_to_do.json', 'how_to_do_gitignore.toml']
    
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞:")
    
    for file in required_files:
        file_path = os.path.join(server_dir, file)
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            print(f"   ‚úÖ {file} ({size} –±–∞–π—Ç)")
        else:
            print(f"   ‚ùå {file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    
    return True

def test_server_executable():
    """–¢–µ—Å—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    
    server_path = os.path.expanduser('~/.cursor/tools/how_to_do.py')
    
    if not os.path.exists(server_path):
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    if not os.access(server_path, os.X_OK):
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π")
        return False
    
    print("‚úÖ –°–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π")
    return True

def test_generate_gitignore_command():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã generate gitignore"""
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä
        sys.path.insert(0, os.path.expanduser('~/.cursor/tools'))
        from how_to_do import handle_request
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        request = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "tools/call",
            "params": {
                "name": "generate_gitignore",
                "arguments": {}
            }
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        response = handle_request(request)
        
        if "result" in response:
            content = response["result"]["content"][0]["text"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª–∞
            if "RULES FOR USE" in content and "##" in content:
                print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ generate gitignore –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
                print(f"   –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                return True
            else:
                print("‚ùå –ö–æ–º–∞–Ω–¥–∞ generate gitignore –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã generate gitignore: {response.get('error', {})}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        return False

if __name__ == '__main__':
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Cursor IDE...")
    print()
    
    # –¢–µ—Å—Ç 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCP
    print("1. –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MCP:")
    test1 = test_mcp_configuration()
    print()
    
    # –¢–µ—Å—Ç 2: –§–∞–π–ª—ã —Å–µ—Ä–≤–µ—Ä–∞
    print("2. –¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞:")
    test2 = test_server_files()
    print()
    
    # –¢–µ—Å—Ç 3: –ò—Å–ø–æ–ª–Ω—è–µ–º–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    print("3. –¢–µ—Å—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞:")
    test3 = test_server_executable()
    print()
    
    # –¢–µ—Å—Ç 4: –ö–æ–º–∞–Ω–¥–∞ generate gitignore
    print("4. –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã generate gitignore:")
    test4 = test_generate_gitignore_command()
    print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if test1 and test2 and test3 and test4:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print()
        print("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Cursor:")
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor IDE")
        print("2. –û—Ç–∫—Ä–æ–π—Ç–µ AI —á–∞—Ç")
        print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: generate gitignore")
        print("4. –°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –∏ —Å–æ–∑–¥–∞—Å—Ç .gitignore")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Cursor IDE") 